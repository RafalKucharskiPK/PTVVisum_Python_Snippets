#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.3 on Thu Oct 06 12:50:28 2011

import wx

global Dir
global skimno

# begin wxGlade: extracode
# end wxGlade



class MyDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER|wx.MAXIMIZE_BOX|wx.THICK_FRAME
        wx.Dialog.__init__(self, *args, **kwds)
        self.notebook = wx.Notebook(self, -1, style=0)
        self.notebook_pane_4 = wx.Panel(self.notebook, -1)
        self.notebook_pane_3 = wx.Panel(self.notebook, -1)
        self.notebook_1_pane_2 = wx.Panel(self.notebook, -1)
        self.notebook_1_pane_2_copy = wx.Panel(self.notebook, -1)
        self.sizer_12_copy_staticbox = wx.StaticBox(self.notebook_1_pane_2_copy, -1, "1. Peak hour shares - suburban")
        self.sizer_9_staticbox = wx.StaticBox(self.notebook_1_pane_2_copy, -1, "3. Import trip generation data from spreadsheet")
        self.sizer_9_copy_staticbox = wx.StaticBox(self.notebook_1_pane_2, -1, "Distribution parameters")
        self.sizer_13_staticbox = wx.StaticBox(self.notebook_pane_4, -1, "Set TFlow fuzzy treshold")
        self.sizer_12_staticbox = wx.StaticBox(self.notebook_1_pane_2_copy, -1, "2. Peak hour shares - suburban")
        self.label_1 = wx.StaticText(self, -1, u"Four Stage Model assistant by", style=wx.ALIGN_RIGHT)
        self.logo_copy = wx.StaticBitmap(self, -1, wx.Bitmap(Paths["Logo"], wx.BITMAP_TYPE_ANY))
        self.label_5 = wx.StaticText(self.notebook_1_pane_2_copy, -1, "1. Set input directory (with *.fil, *.par, etc)")
        self.text_ctrl_1 = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "D:\\Krk_script\\")
        self.panel_13 = wx.Panel(self.notebook_1_pane_2_copy, -1)
        self.label_6_copy_2 = wx.StaticText(self.notebook_1_pane_2_copy, -1, "D-P")
        self.label_6_copy_3 = wx.StaticText(self.notebook_1_pane_2_copy, -1, "P-D")
        self.label_6_copy_4 = wx.StaticText(self.notebook_1_pane_2_copy, -1, "D-N")
        self.label_6_copy_5 = wx.StaticText(self.notebook_1_pane_2_copy, -1, "N-D")
        self.label_6_copy_6 = wx.StaticText(self.notebook_1_pane_2_copy, -1, "D-I")
        self.label_6_copy_7 = wx.StaticText(self.notebook_1_pane_2_copy, -1, "I-D")
        self.label_6_copy_8 = wx.StaticText(self.notebook_1_pane_2_copy, -1, "NZD")
        self.label_6 = wx.StaticText(self.notebook_1_pane_2_copy, -1, "AM")
        self.Uh11 = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.28")
        self.Uh12 = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.01")
        self.Uh13 = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.06")
        self.Uh14 = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.01")
        self.Uh15 = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.09")
        self.Uh16 = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.01")
        self.Uh17 = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.06")
        self.label_6_copy = wx.StaticText(self.notebook_1_pane_2_copy, -1, "Noon")
        self.Uh21 = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.04")
        self.Uh22 = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.01")
        self.Uh23 = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.02")
        self.Uh24 = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.05")
        self.Uh25 = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.08")
        self.Uh26 = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.09")
        self.Uh27 = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.1")
        self.label_6_copy_1 = wx.StaticText(self.notebook_1_pane_2_copy, -1, "PM")
        self.Uh31 = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.074")
        self.Uh32 = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.2181")
        self.Uh33 = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.0232")
        self.Uh34 = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.1570")
        self.Uh35 = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.0576")
        self.Uh36 = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.0809")
        self.Uh37 = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.1186")
        self.panel_13_copy = wx.Panel(self.notebook_1_pane_2_copy, -1)
        self.label_6_copy_2_copy = wx.StaticText(self.notebook_1_pane_2_copy, -1, "D-P")
        self.label_6_copy_3_copy = wx.StaticText(self.notebook_1_pane_2_copy, -1, "P-D")
        self.label_6_copy_4_copy = wx.StaticText(self.notebook_1_pane_2_copy, -1, "D-N")
        self.label_6_copy_5_copy = wx.StaticText(self.notebook_1_pane_2_copy, -1, "N-D")
        self.label_6_copy_6_copy = wx.StaticText(self.notebook_1_pane_2_copy, -1, "D-I")
        self.label_6_copy_7_copy = wx.StaticText(self.notebook_1_pane_2_copy, -1, "I-D")
        self.label_6_copy_8_copy = wx.StaticText(self.notebook_1_pane_2_copy, -1, "NZD")
        self.label_6_copy_9 = wx.StaticText(self.notebook_1_pane_2_copy, -1, "AM")
        self.Uh11_copy = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.31")
        self.Uh12_copy = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.05")
        self.Uh13_copy = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.07")
        self.Uh14_copy = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0")
        self.Uh15_copy = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0")
        self.Uh16_copy = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0")
        self.Uh17_copy = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0")
        self.label_6_copy_copy = wx.StaticText(self.notebook_1_pane_2_copy, -1, "Noon")
        self.Uh21_copy = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.04")
        self.Uh22_copy = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0")
        self.Uh23_copy = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.01")
        self.Uh24_copy = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.02")
        self.Uh25_copy = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.04")
        self.Uh26_copy = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.02")
        self.Uh27_copy = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0")
        self.label_6_copy_1_copy = wx.StaticText(self.notebook_1_pane_2_copy, -1, "PM")
        self.Uh31_copy = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.02")
        self.Uh32_copy = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.11")
        self.Uh33_copy = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0")
        self.Uh34_copy = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.06")
        self.Uh35_copy = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.03")
        self.Uh36_copy = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0.05")
        self.Uh37_copy = wx.TextCtrl(self.notebook_1_pane_2_copy, -1, "0")
        self.Load_Button = wx.Button(self.notebook_1_pane_2_copy, -1, "import from spreadsheet")
        self.label_4_copy_3 = wx.StaticText(self.notebook_1_pane_2, -1, "Motivation:")
        self.label_4_copy_3_copy_1_copy_copy_1 = wx.StaticText(self.notebook_1_pane_2, -1, "Parameters:      a", style=wx.ALIGN_CENTRE)
        self.label_4_copy_3_copy_1_copy_copy_2 = wx.StaticText(self.notebook_1_pane_2, -1, "b")
        self.label_4_copy_3_copy_1_copy_copy_3 = wx.StaticText(self.notebook_1_pane_2, -1, "c")
        self.panel_3 = wx.Panel(self.notebook_1_pane_2, -1)
        self.label_4_copy_3_copy = wx.StaticText(self.notebook_1_pane_2, -1, "HWH urban")
        self.D1a = wx.TextCtrl(self.notebook_1_pane_2, -1, "1", style=wx.TE_NOHIDESEL)
        self.D1b = wx.TextCtrl(self.notebook_1_pane_2, -1, "3", style=wx.TE_NOHIDESEL)
        self.D1c = wx.TextCtrl(self.notebook_1_pane_2, -1, "-1", style=wx.TE_NOHIDESEL)
        self.panel_12 = wx.Panel(self.notebook_1_pane_2, -1)
        self.label_4_copy_3_copy_1 = wx.StaticText(self.notebook_1_pane_2, -1, "HEH urban")
        self.d2a = wx.TextCtrl(self.notebook_1_pane_2, -1, "1", style=wx.TE_NOHIDESEL)
        self.D2b = wx.TextCtrl(self.notebook_1_pane_2, -1, "2.5", style=wx.TE_NOHIDESEL)
        self.D2c = wx.TextCtrl(self.notebook_1_pane_2, -1, "-1", style=wx.TE_NOHIDESEL)
        self.panel_5 = wx.Panel(self.notebook_1_pane_2, -1)
        self.label_4_copy_3_copy_1_copy = wx.StaticText(self.notebook_1_pane_2, -1, "HOH urban")
        self.D3a = wx.TextCtrl(self.notebook_1_pane_2, -1, "1", style=wx.TE_NOHIDESEL)
        self.D3b = wx.TextCtrl(self.notebook_1_pane_2, -1, "2.4", style=wx.TE_NOHIDESEL)
        self.D3c = wx.TextCtrl(self.notebook_1_pane_2, -1, "-1", style=wx.TE_NOHIDESEL)
        self.panel_6 = wx.Panel(self.notebook_1_pane_2, -1)
        self.label_4_copy_3_copy_copy = wx.StaticText(self.notebook_1_pane_2, -1, "HWH suburban")
        self.D4a = wx.TextCtrl(self.notebook_1_pane_2, -1, "1", style=wx.TE_NOHIDESEL)
        self.D4b = wx.TextCtrl(self.notebook_1_pane_2, -1, "-0.031", style=wx.TE_NOHIDESEL)
        self.D4c = wx.TextCtrl(self.notebook_1_pane_2, -1, "-0.3", style=wx.TE_NOHIDESEL)
        self.panel_7 = wx.Panel(self.notebook_1_pane_2, -1)
        self.label_4_copy_3_copy_1_copy_1 = wx.StaticText(self.notebook_1_pane_2, -1, "HEH suburban")
        self.D5a = wx.TextCtrl(self.notebook_1_pane_2, -1, "1", style=wx.TE_NOHIDESEL)
        self.D5b = wx.TextCtrl(self.notebook_1_pane_2, -1, "-0.025", style=wx.TE_NOHIDESEL)
        self.D5c = wx.TextCtrl(self.notebook_1_pane_2, -1, "-0.32", style=wx.TE_NOHIDESEL)
        self.panel_8 = wx.Panel(self.notebook_1_pane_2, -1)
        self.label_4_copy_3_copy_1_copy_copy = wx.StaticText(self.notebook_1_pane_2, -1, "HOH suburban")
        self.D6a = wx.TextCtrl(self.notebook_1_pane_2, -1, "1")
        self.D6b = wx.TextCtrl(self.notebook_1_pane_2, -1, "-0.037")
        self.D6c = wx.TextCtrl(self.notebook_1_pane_2, -1, "-0.46", style=wx.TE_NOHIDESEL)
        self.Dist_button = wx.Button(self.notebook_1_pane_2, -1, "Calculate")
        self.label_4_copy_3_copy_1_copy_copy_copy = wx.StaticText(self.notebook_1_pane_2, -1, "HOH suburban")
        self.D7a = wx.TextCtrl(self.notebook_1_pane_2, -1, "1")
        self.D7b = wx.TextCtrl(self.notebook_1_pane_2, -1, "0")
        self.D7c = wx.TextCtrl(self.notebook_1_pane_2, -1, "0.18", style=wx.TE_RICH|wx.TE_NOHIDESEL)
        self.label_4 = wx.StaticText(self.notebook_pane_3, -1, "PrTImpedance = TCur x")
        self.M1 = wx.TextCtrl(self.notebook_pane_3, -1, "1.5")
        self.label_4_copy = wx.StaticText(self.notebook_pane_3, -1, "PuT Impedance = PJT x")
        self.M2 = wx.TextCtrl(self.notebook_pane_3, -1, "1")
        self.label_4_copy_1 = wx.StaticText(self.notebook_pane_3, -1, " \"c\" parameter for logit model: e^(c*U)")
        self.M3 = wx.TextCtrl(self.notebook_pane_3, -1, "-0.1")
        self.panel_11 = wx.Panel(self.notebook_pane_3, -1)
        self.MSplit_Button = wx.Button(self.notebook_pane_3, -1, "Calculate")
        self.label_7 = wx.StaticText(self.notebook_pane_4, -1, "1/X < Base_Mtx[i,j]/TFlowMtx[i,j] < X")
        self.Tfl1 = wx.TextCtrl(self.notebook_pane_4, -1, "2")
        self.MSplit_Button_copy = wx.Button(self.notebook_pane_4, -1, "Calculate")
        self.panel_14 = wx.Panel(self.notebook_pane_4, -1)
        self.HelpBtn = wx.Button(self, -1, "Help")
        self.logo = wx.StaticBitmap(self, -1, wx.Bitmap(Paths["Logo"], wx.BITMAP_TYPE_ANY))
        self.CancelBtn = wx.Button(self, -1, "Cancel")
        self.console = wx.StaticText(self, -1, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.Import_Excel, self.Load_Button)
        self.Bind(wx.EVT_BUTTON, self.Dist_click, self.Dist_button)
        self.Bind(wx.EVT_BUTTON, self.MSplit_Calc, self.MSplit_Button)
        self.Bind(wx.EVT_BUTTON, self.TFlow_COrr_Calc, self.MSplit_Button_copy)
        self.Bind(wx.EVT_BUTTON, self.HelpClick, self.HelpBtn)
        self.Bind(wx.EVT_BUTTON, self.Cancel_Click, self.CancelBtn)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyDialog.__set_properties
        self.SetTitle("Four Stage Assistant")
        self.SetSize((750, 703))
        self.label_1.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.logo_copy.SetMinSize((80, 20))
        self.Uh11.SetMinSize((50, -1))
        self.Uh12.SetMinSize((50, -1))
        self.Uh13.SetMinSize((50, -1))
        self.Uh14.SetMinSize((50, -1))
        self.Uh15.SetMinSize((50, -1))
        self.Uh16.SetMinSize((50, -1))
        self.Uh17.SetMinSize((50, -1))
        self.Uh21.SetMinSize((50, -1))
        self.Uh22.SetMinSize((50, -1))
        self.Uh23.SetMinSize((50, -1))
        self.Uh24.SetMinSize((50, -1))
        self.Uh25.SetMinSize((50, -1))
        self.Uh26.SetMinSize((50, -1))
        self.Uh27.SetMinSize((50, -1))
        self.Uh31.SetMinSize((50, -1))
        self.Uh32.SetMinSize((50, -1))
        self.Uh33.SetMinSize((50, -1))
        self.Uh34.SetMinSize((50, -1))
        self.Uh35.SetMinSize((50, -1))
        self.Uh36.SetMinSize((50, -1))
        self.Uh37.SetMinSize((50, -1))
        self.Uh11_copy.SetMinSize((50, -1))
        self.Uh12_copy.SetMinSize((50, -1))
        self.Uh13_copy.SetMinSize((50, -1))
        self.Uh14_copy.SetMinSize((50, -1))
        self.Uh15_copy.SetMinSize((50, -1))
        self.Uh16_copy.SetMinSize((50, -1))
        self.Uh17_copy.SetMinSize((50, -1))
        self.Uh21_copy.SetMinSize((50, -1))
        self.Uh22_copy.SetMinSize((50, -1))
        self.Uh23_copy.SetMinSize((50, -1))
        self.Uh24_copy.SetMinSize((50, -1))
        self.Uh25_copy.SetMinSize((50, -1))
        self.Uh26_copy.SetMinSize((50, -1))
        self.Uh27_copy.SetMinSize((50, -1))
        self.Uh31_copy.SetMinSize((50, -1))
        self.Uh32_copy.SetMinSize((50, -1))
        self.Uh33_copy.SetMinSize((50, -1))
        self.Uh34_copy.SetMinSize((50, -1))
        self.Uh35_copy.SetMinSize((50, -1))
        self.Uh36_copy.SetMinSize((50, -1))
        self.Uh37_copy.SetMinSize((50, -1))
        self.Load_Button.SetMinSize((189, -1))
        self.D1a.SetMinSize((-1, -1))
        self.D1b.SetMinSize((-1, -1))
        self.D1c.SetMinSize((-1, -1))
        self.d2a.SetMinSize((-1, -1))
        self.D2b.SetMinSize((-1, -1))
        self.D2c.SetMinSize((-1, -1))
        self.D3a.SetMinSize((-1, -1))
        self.D3b.SetMinSize((-1, -1))
        self.D3c.SetMinSize((-1, -1))
        self.D4a.SetMinSize((-1, -1))
        self.D4b.SetMinSize((-1, -1))
        self.D4c.SetMinSize((-1, -1))
        self.D5a.SetMinSize((-1, -1))
        self.D5b.SetMinSize((-1, -1))
        self.D5c.SetMinSize((-1, -1))
        self.D6a.SetMinSize((-1, -1))
        self.D6b.SetMinSize((-1, -1))
        self.D6c.SetMinSize((-1, -1))
        self.Dist_button.SetMinSize((87, -1))
        self.D7a.SetMinSize((-1, -1))
        self.D7b.SetMinSize((-1, -1))
        self.D7c.SetMinSize((-1, -1))
        self.M1.SetMinSize((30, -1))
        self.M2.SetMinSize((30, -1))
        self.M3.SetMinSize((30, -1))
        self.MSplit_Button.SetMinSize((20, -1))
        self.MSplit_Button_copy.SetMinSize((87, 20))
        self.HelpBtn.SetMinSize((87, -1))
        self.logo.SetMinSize((80, 20))
        self.CancelBtn.SetMinSize((87, -1))
        self.console.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "MS Shell Dlg 2"))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyDialog.__do_layout
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_13 = wx.StaticBoxSizer(self.sizer_13_staticbox, wx.HORIZONTAL)
        sizer_14 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_2 = wx.GridSizer(3, 2, 0, 0)
        sizer_9_copy = wx.StaticBoxSizer(self.sizer_9_copy_staticbox, wx.HORIZONTAL)
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1 = wx.GridSizer(8, 5, 0, 0)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_9 = wx.StaticBoxSizer(self.sizer_9_staticbox, wx.HORIZONTAL)
        sizer_12_copy = wx.StaticBoxSizer(self.sizer_12_copy_staticbox, wx.HORIZONTAL)
        grid_sizer_3_copy = wx.GridSizer(4, 8, 0, 0)
        sizer_12 = wx.StaticBoxSizer(self.sizer_12_staticbox, wx.HORIZONTAL)
        grid_sizer_3 = wx.GridSizer(4, 8, 0, 0)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(self.label_1, 1, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_4.Add(self.logo_copy, 1, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_3.Add(sizer_4, 2, wx.EXPAND, 0)
        sizer_11.Add(self.label_5, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_11.Add(self.text_ctrl_1, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_8.Add(sizer_11, 1, wx.EXPAND, 0)
        grid_sizer_3.Add(self.panel_13, 1, wx.EXPAND, 0)
        grid_sizer_3.Add(self.label_6_copy_2, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_3.Add(self.label_6_copy_3, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_3.Add(self.label_6_copy_4, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_3.Add(self.label_6_copy_5, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_3.Add(self.label_6_copy_6, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_3.Add(self.label_6_copy_7, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_3.Add(self.label_6_copy_8, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_3.Add(self.label_6, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_3.Add(self.Uh11, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.Uh12, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.Uh13, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.Uh14, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.Uh15, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.Uh16, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.Uh17, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.label_6_copy, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_3.Add(self.Uh21, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.Uh22, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.Uh23, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.Uh24, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.Uh25, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.Uh26, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.Uh27, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.label_6_copy_1, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_3.Add(self.Uh31, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.Uh32, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.Uh33, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.Uh34, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.Uh35, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.Uh36, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.Uh37, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_12.Add(grid_sizer_3, 1, wx.EXPAND, 0)
        sizer_8.Add(sizer_12, 1, wx.EXPAND, 0)
        grid_sizer_3_copy.Add(self.panel_13_copy, 1, wx.EXPAND, 0)
        grid_sizer_3_copy.Add(self.label_6_copy_2_copy, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_3_copy.Add(self.label_6_copy_3_copy, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_3_copy.Add(self.label_6_copy_4_copy, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_3_copy.Add(self.label_6_copy_5_copy, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_3_copy.Add(self.label_6_copy_6_copy, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_3_copy.Add(self.label_6_copy_7_copy, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_3_copy.Add(self.label_6_copy_8_copy, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_3_copy.Add(self.label_6_copy_9, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_3_copy.Add(self.Uh11_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3_copy.Add(self.Uh12_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3_copy.Add(self.Uh13_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3_copy.Add(self.Uh14_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3_copy.Add(self.Uh15_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3_copy.Add(self.Uh16_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3_copy.Add(self.Uh17_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3_copy.Add(self.label_6_copy_copy, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_3_copy.Add(self.Uh21_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3_copy.Add(self.Uh22_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3_copy.Add(self.Uh23_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3_copy.Add(self.Uh24_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3_copy.Add(self.Uh25_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3_copy.Add(self.Uh26_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3_copy.Add(self.Uh27_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3_copy.Add(self.label_6_copy_1_copy, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_3_copy.Add(self.Uh31_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3_copy.Add(self.Uh32_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3_copy.Add(self.Uh33_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3_copy.Add(self.Uh34_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3_copy.Add(self.Uh35_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3_copy.Add(self.Uh36_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3_copy.Add(self.Uh37_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_12_copy.Add(grid_sizer_3_copy, 1, wx.EXPAND, 0)
        sizer_8.Add(sizer_12_copy, 1, wx.EXPAND, 0)
        sizer_9.Add(self.Load_Button, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_8.Add(sizer_9, 1, wx.EXPAND, 0)
        self.notebook_1_pane_2_copy.SetSizer(sizer_8)
        grid_sizer_1.Add(self.label_4_copy_3, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_1.Add(self.label_4_copy_3_copy_1_copy_copy_1, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_1.Add(self.label_4_copy_3_copy_1_copy_copy_2, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_1.Add(self.label_4_copy_3_copy_1_copy_copy_3, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_1.Add(self.panel_3, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.label_4_copy_3_copy, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 2)
        grid_sizer_1.Add(self.D1a, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.D1b, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.D1c, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.panel_12, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.label_4_copy_3_copy_1, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_1.Add(self.d2a, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.D2b, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.D2c, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.panel_5, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.label_4_copy_3_copy_1_copy, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_1.Add(self.D3a, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.D3b, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.D3c, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.panel_6, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.label_4_copy_3_copy_copy, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 2)
        grid_sizer_1.Add(self.D4a, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.D4b, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.D4c, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.panel_7, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.label_4_copy_3_copy_1_copy_1, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_1.Add(self.D5a, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.D5b, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.D5c, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.panel_8, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.label_4_copy_3_copy_1_copy_copy, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_1.Add(self.D6a, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.D6b, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.D6c, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.Dist_button, 1, wx.RIGHT|wx.ALIGN_RIGHT, 15)
        grid_sizer_1.Add(self.label_4_copy_3_copy_1_copy_copy_copy, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_1.Add(self.D7a, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.D7b, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.D7c, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_1.Add(grid_sizer_1, 1, wx.EXPAND|wx.SHAPED, 0)
        sizer_9_copy.Add(sizer_1, 1, wx.EXPAND, 0)
        self.notebook_1_pane_2.SetSizer(sizer_9_copy)
        grid_sizer_2.Add(self.label_4, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_2.Add(self.M1, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_2.Add(self.label_4_copy, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_2.Add(self.M2, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_2.Add(self.label_4_copy_1, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_2.Add(self.M3, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_7.Add(grid_sizer_2, 1, wx.EXPAND, 0)
        sizer_6.Add(sizer_7, 1, wx.EXPAND, 0)
        sizer_10.Add(self.panel_11, 3, wx.EXPAND, 0)
        sizer_10.Add(self.MSplit_Button, 1, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_6.Add(sizer_10, 1, wx.EXPAND, 0)
        sizer_2.Add(sizer_6, 1, wx.EXPAND, 0)
        self.notebook_pane_3.SetSizer(sizer_2)
        sizer_14.Add(self.label_7, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_14.Add(self.Tfl1, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_14.Add(self.MSplit_Button_copy, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_14.Add(self.panel_14, 1, wx.EXPAND, 0)
        sizer_13.Add(sizer_14, 1, wx.EXPAND, 0)
        self.notebook_pane_4.SetSizer(sizer_13)
        self.notebook.AddPage(self.notebook_1_pane_2_copy, "Initial settings, Trip Generation")
        self.notebook.AddPage(self.notebook_1_pane_2, "Trip Distribution")
        self.notebook.AddPage(self.notebook_pane_3, "Modal Split")
        self.notebook.AddPage(self.notebook_pane_4, "Matrix Correction")
        sizer_3.Add(self.notebook, 20, wx.EXPAND, 0)
        sizer_5.Add(self.HelpBtn, 1, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_5.Add(self.logo, 3, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_5.Add(self.CancelBtn, 1, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_3.Add(sizer_5, 2, wx.ALL|wx.EXPAND, 10)
        sizer_3.Add(self.console, 0, 0, 0)
        self.SetSizer(sizer_3)
        self.Layout()
        # end wxGlade

    def Import_Excel(self, event): # wxGlade: MyDialog.<event_handler>
        
       Uh_miasto=[[float(self.Uh11.GetValue()), float(self.Uh12.GetValue()), float(self.Uh13.GetValue()), float(self.Uh14.GetValue()), float(self.Uh15.GetValue()), float(self.Uh16.GetValue()), float(self.Uh17.GetValue())],
                  [float(self.Uh21.GetValue()), float(self.Uh22.GetValue()), float(self.Uh23.GetValue()), float(self.Uh24.GetValue()), float(self.Uh25.GetValue()), float(self.Uh26.GetValue()), float(self.Uh27.GetValue())],
                  [float(self.Uh31.GetValue()), float(self.Uh32.GetValue()), float(self.Uh33.GetValue()), float(self.Uh34.GetValue()), float(self.Uh35.GetValue()), float(self.Uh36.GetValue()), float(self.Uh37.GetValue())]]

   
   
       Uh_strefa=[[float(self.Uh11_copy.GetValue()), float(self.Uh12_copy.GetValue()), float(self.Uh13_copy.GetValue()), float(self.Uh14_copy.GetValue()), float(self.Uh15_copy.GetValue()), float(self.Uh16_copy.GetValue()), float(self.Uh17_copy.GetValue())],
                  [float(self.Uh21_copy.GetValue()), float(self.Uh22_copy.GetValue()), float(self.Uh23_copy.GetValue()), float(self.Uh24_copy.GetValue()), float(self.Uh25_copy.GetValue()), float(self.Uh26_copy.GetValue()), float(self.Uh27_copy.GetValue())],
                  [float(self.Uh31_copy.GetValue()), float(self.Uh32_copy.GetValue()), float(self.Uh33_copy.GetValue()), float(self.Uh34_copy.GetValue()), float(self.Uh35_copy.GetValue()), float(self.Uh36_copy.GetValue()), float(self.Uh37_copy.GetValue())]]

        
       Generate_UDAs() 
       self.dirname = ''
       dlg = wx.FileDialog(self, "Choose a file", self.dirname,"", "*.*", wx.OPEN)       
       if dlg.ShowModal()==wx.ID_OK:           
            self.path=dlg.GetPath()
       skimno=Skim_DST() 
       Potencjaly=Excel_import(self.path)
       Visum_input(Potencjaly,Uh_miasto,Uh_strefa)
   
    def Dist_click(self, event): # wxGlade: MyDialog.<event_handler>
        Dir=self.text_ctrl_1.GetValue()
        Visum.Procedures.Save(Dir+"_proc_backup.par")
        Grav=[0,["D-P-D miasto",self.D1a.GetValue(),self.D1b.GetValue(),self.D1c.GetValue()],
              ["D-N-D miasto",self.D1a.GetValue(),self.D1b.GetValue(),self.D1c.GetValue()],
              ["D-I-D NZD miasto",self.D1a.GetValue(),self.D1b.GetValue(),self.D1c.GetValue()],
              ["D-P-D strefa",self.D1a.GetValue(),self.D1b.GetValue(),self.D1c.GetValue()],
              ["D-N-D strefa",self.D1a.GetValue(),self.D1b.GetValue(),self.D1c.GetValue()],
              ["D-I-D strefa",self.D1a.GetValue(),self.D1b.GetValue(),self.D1c.GetValue()],
              ["NZD strefa",self.D1a.GetValue(),self.D1b.GetValue(),self.D1c.GetValue()]]
        
        
        
        obszar="miasto"
        Generation(obszar)
        Distribution(obszar,Grav,Dir)
        
        obszar="aglo"
        Generation(obszar)
        
        Distribution(obszar,Grav,Dir)
        Visum.Procedures.Open(Dir+"_proc_backup.par",True,False)

    def Cancel_Click(self, event): # wxGlade: MyDialog.<event_handler>
        self.Destroy()

    def HelpClick(self, event): # wxGlade: MyDialog.<event_handler>
        import os
        os.startfile("help.htm")

    



    def Set_Dir(self, event): # wxGlade: MyDialog.<event_handler>
        print "Event handler `Set_Dir' not implemented"
        event.Skip()

    def MSplit_Calc(self, event): # wxGlade: MyDialog.<event_handler>
        
        def CreateXML(PrTFactor,PuTFactor,Exp_param):
            path=Dir+"/MSplit.xml"
            f=open(path,"w")
            XML_file="""<?xml  version = "1.0"  encoding = "UTF-8"?>
                <PROCEDURES  VERSION = "5">
                  <OPERATIONS>
                    <OPERATION
                      NO = "1"
                      OPERATIONTYPE = "ModeChoice"
                      ACTIVE = "1"
                      COMMENT = "">
                      <MODECHOICEPARA        RESETMATRICES = "1"        DSTRATSET = "Suma_popo_miasto">
                        <MODECHOICEMODEPARA          MODECODE = "PrT">
                          <MODECHOICELINCOMBITEM
                            INPUTTYPE = "MATRIX"
                            ATTID = "1.0"
                            MATRIXNO = "1030">
                            <MODECHOICELINCOMBDSTRATITEM
                              DEMANDSTRATUMCODE = "Suma_popo_miasto"
                              TRANSFORMATIONTYPE = "TRANSFORMATIONTYPE_NONE"
                              COEFFICIENT = " """+PrTFactor+""" "
                            />            
                          </MODECHOICELINCOMBITEM>
                        </MODECHOICEMODEPARA>
                        <MODECHOICEMODEPARA          MODECODE = "PuT">
                          <MODECHOICELINCOMBITEM
                            INPUTTYPE = "MATRIX"
                            ATTID = "1.0"
                            MATRIXNO = "1032">
                            <MODECHOICELINCOMBDSTRATITEM
                              DEMANDSTRATUMCODE = "Suma_popo_miasto"
                              TRANSFORMATIONTYPE = "TRANSFORMATIONTYPE_NONE"
                              COEFFICIENT = " """+PuTFactor+""" "
                            />            
                          </MODECHOICELINCOMBITEM>
                        </MODECHOICEMODEPARA>
                        <MODECHOICEDSTRATPARA
                          DEMANDSTRATUMCODE = "Suma_popo_miasto"
                          FUNCTIONTYPE = "UTILITYFUNCTIONTYPE_LOGIT"
                          PARA_A = "1,00000000"
                          PARA_B = "1,00000000"
                          PARA_C = " """+Exp_param+""" "
                        />        
                      </MODECHOICEPARA>
                    </OPERATION>
                    <OPERATION
                      NO = "2"
                      OPERATIONTYPE = "ModeChoice"
                      ACTIVE = "1"
                      COMMENT = "">
                      <MODECHOICEPARA        RESETMATRICES = "1"        DSTRATSET = "Suma_miedzy_miasto">
                        <MODECHOICEMODEPARA          MODECODE = "PrT">
                          <MODECHOICELINCOMBITEM
                            INPUTTYPE = "MATRIX"
                            ATTID = "1.0"
                            MATRIXNO = "1020">
                            <MODECHOICELINCOMBDSTRATITEM
                              DEMANDSTRATUMCODE = "Suma_miedzy_miasto"
                              TRANSFORMATIONTYPE = "TRANSFORMATIONTYPE_NONE"
                              COEFFICIENT = " """+PrTFactor+""" "
                            />            
                          </MODECHOICELINCOMBITEM>
                        </MODECHOICEMODEPARA>
                        <MODECHOICEMODEPARA          MODECODE = "PuT">
                          <MODECHOICELINCOMBITEM
                            INPUTTYPE = "MATRIX"
                            ATTID = "1.0"
                            MATRIXNO = "1032">
                            <MODECHOICELINCOMBDSTRATITEM
                              DEMANDSTRATUMCODE = "Suma_miedzy_miasto"
                              TRANSFORMATIONTYPE = "TRANSFORMATIONTYPE_NONE"
                              COEFFICIENT = " """+PuTFactor+""" "
                            />            
                          </MODECHOICELINCOMBITEM>
                        </MODECHOICEMODEPARA>
                        <MODECHOICEDSTRATPARA
                          DEMANDSTRATUMCODE = "Suma_miedzy_miasto"
                          FUNCTIONTYPE = "UTILITYFUNCTIONTYPE_LOGIT"
                          PARA_A = "1,00000000"
                          PARA_B = "1,00000000"
                          PARA_C = " """+Exp_param+""" "
                        />        
                      </MODECHOICEPARA>
                    </OPERATION>
                    <OPERATION
                      NO = "3"
                      OPERATIONTYPE = "ModeChoice"
                      ACTIVE = "1"
                      COMMENT = "">
                      <MODECHOICEPARA        RESETMATRICES = "1"        DSTRATSET = "Suma_rano_miasto">
                        <MODECHOICEMODEPARA          MODECODE = "PrT">
                          <MODECHOICELINCOMBITEM
                            INPUTTYPE = "MATRIX"
                            ATTID = "1.0"
                            MATRIXNO = "1030">
                            <MODECHOICELINCOMBDSTRATITEM
                              DEMANDSTRATUMCODE = "Suma_rano_miasto"
                              TRANSFORMATIONTYPE = "TRANSFORMATIONTYPE_NONE"
                              COEFFICIENT = " """+PrTFactor+""" "
                            />            
                          </MODECHOICELINCOMBITEM>
                        </MODECHOICEMODEPARA>
                        <MODECHOICEMODEPARA          MODECODE = "PuT">
                          <MODECHOICELINCOMBITEM
                            INPUTTYPE = "MATRIX"
                            ATTID = "1.0"
                            MATRIXNO = "1032">
                            <MODECHOICELINCOMBDSTRATITEM
                              DEMANDSTRATUMCODE = "Suma_rano_miasto"
                              TRANSFORMATIONTYPE = "TRANSFORMATIONTYPE_NONE"
                              COEFFICIENT = " """+PuTFactor+""" "
                            />            
                          </MODECHOICELINCOMBITEM>
                        </MODECHOICEMODEPARA>
                        <MODECHOICEDSTRATPARA
                          DEMANDSTRATUMCODE = "Suma_rano_miasto"
                          FUNCTIONTYPE = "UTILITYFUNCTIONTYPE_LOGIT"
                          PARA_A = "1,00000000"
                          PARA_B = "1,00000000"
                          PARA_C = " """+Exp_param+""" "
                        />        
                      </MODECHOICEPARA>
                    </OPERATION>
                  </OPERATIONS>
                </PROCEDURES>"""
            f.writelines(XML_file)
            f.close()
            Visum.Procedures.OpenXml(path,True) 
            Visum.Procedures.Execute()
              
        Dir=self.text_ctrl_1.GetValue()
        PrTFactor=self.M1.Value
        PuTFactor=self.M2.Value
        Exp_param=self.M3.Value
        CreateXML(PrTFactor,PuTFactor,Exp_param)
        

    def TFlow_COrr_Calc(self, event): # wxGlade: MyDialog.<event_handler>
        for szczyt in ["rano","miedzy","popo"]:
            Filtr_po_TFlow(szczyt,float(self.Tfl1.GetValue()))
    

    def TFlow_COrr_Calc(self, event): # wxGlade: MyDialog.<event_handler>
        print "Event handler `TFlow_COrr_Calc' not implemented"
        event.Skip()

    def TFlow_COrr_Calc(self, event): # wxGlade: MyDialog.<event_handler>
        print "Event handler `TFlow_COrr_Calc' not implemented"
        event.Skip()

# end of class MyDialog

"""
 _   _____  
| | /___  \     Intelligent Infrastructure
| |  ___| |     script created by: Rafal Kucharski
| | /  ___/     01/10/2011
| | | |___      info: info@intelligent-infrastructure.eu
|_| |_____|     Copyright (c) Intelligent Infrastructure 2011 

references: none

=====================
Dependencies:
 
1. VisumPy helpers
2. xlwt

=====================
 
==========================
End-User License Agreement:
===========================
This software is created by Intelligent-Infrastructure - Rafal Kucharski (i2) Krakow Polska, who also owns the copyrights. 

By using this software you agree with terms stated below:

1.You can use the software only if You got it from intelligent-infrastructure, or got an written permission of i2 to do so.
2.You can use and modify the software code, as long as you don't sell it's parts commercially.
3.You cannot publish and/or show any parts of the code to third-party users without written permission of i2 
4.If You want to sell the software created by modifying this software, you need to contact with i2 and agree conditions
5.This is one user copy, you cannot use it on multiple computers without written permission to do so
6.You cannot modify this statement
7.You can freely analyze the code, and propose any changes
8. After period defined by special i2 statement this software becomes freeware, so that it can be freely downloaded and/or modified.

sept 2011, Krakow Poland
"""


from VisumPy.helpers import GetMulti, SetMulti, skimLookup


def Init(path=None):
        import win32com.client        
        Visum=win32com.client.Dispatch('Visum.Visum')
        if path!=None: Visum.LoadVersion(path)
        return Visum

try: 
    Visum
except:
    pass 
    #Visum=Init("""D:/DropBox/My Dropbox/i2/Prace/___Nie Visumowe/2011, PK, Krakow/TFlow_9.ver""")
def Get_Paths():    
    '''
    Create paths to working folder, html and png file
    in standalone version script opens visum file with selected path via COM
    '''
    
    Paths={}
    Paths["MainVisum"] = Visum.GetWorkingFolder()
    Paths["ScriptFolder"] = Paths["MainVisum"] + "\\AddIns\\Four Stage Assistant"
    Paths["Logo"]=Paths["ScriptFolder"] + "\\help\\i2_logo.png"
    Paths["Icon"]=Paths["ScriptFolder"] + "\\help\\i2_icon.png"
    Paths["Help"]=Paths["ScriptFolder"] + "\\help.htm"
    
    return Paths

Paths=Get_Paths()

def Generate_UDAs():  
    """
    funkcja tworzy UDA hurtowo, 
    sprawdza za kazdym razem, czy jest to mozliwe 
    (czy parametr juz nie istnieje)
    
    parametr miasto: 1 - KR, 0 - aglo, -1 - wloty zewnetrzne
    """
    
    def miasto(i):
        if i<265:
            miasto=1
        elif i<302:
            miasto=0
        else:
            miasto=-1
        return miasto
      
    def AddAttr(name):
        try:
            Names.append(name)
            Visum.Net.Zones.AddUserDefinedAttribute(name,name,name, 2,2)
        except: pass
        
    Names=[]
    try:
        Visum.Net.Zones.AddUserDefinedAttribute("miasto","miasto","miasto", 1)
    except: pass
    AddAttr("dummy_prod")
    AddAttr("dummy_atr")    
    kolumna=[miasto(i) for i in range(321)]
    SetMulti(Visum.Net.Zones, "miasto", kolumna, activeOnly = False)
    Motywacje=["D-P",    "P-D" ,   "D-N"  ,  "N-D" ,   "D-I",   "I-D" ,   "NZD"]    
    for motywacja in Motywacje:        
        AddAttr("prod_"+motywacja+"_rano")
        AddAttr("prod_"+motywacja+"_miedzy")
        AddAttr("prod_"+motywacja+"_popo")
        AddAttr("atr_"+motywacja+"_rano")
        AddAttr("atr_"+motywacja+"_miedzy")
        AddAttr("atr_"+motywacja+"_popo")       
    
        
    
    TimeSeries=["_rano","_miedzy","_popo"]
    Dseg=["_PuT"]
    for szczyt in TimeSeries:
       for seg in Dseg:
           #AddAttr("RK_pomiar"+seg+szczyt) 
           AddAttr("RK_referencja"+seg+szczyt+"_TFlow_toler")
           AddAttr("RK_referencja"+seg+szczyt)
        
def Excel_import(path):
    """ otwiera arkusz excelowski i pobiera dane o potencjalach - nie zmieniac ukladu pliku excelowskiego"""
    import xlrd    
    book = xlrd.open_workbook(path)    
    
    
    def Miasto():
        sh = book.sheet_by_index(0)
        rlo=5
        rhi=270
        Potencjaly=[]    
        for cx in [18,19,26,27,28,29,30,34,35,42,43,44,45,46]:
            Potencjaly.append([])
            for rx in xrange(rlo, rhi):
                Potencjaly[-1].append(sh.cell_value(rx, cx))  
        return Potencjaly
        
    def Aglo(Potencjaly):
        sh = book.sheet_by_index(1)
        rlo=6
        rhi=43
        clo=42
        chi=42+11        
        for cx in range(6): 
            for rx in xrange(rlo, rhi):
                val=sh.cell_value(rx, 2*cx+42)                
                try: 
                    int(val)                    
                except: 
                    val=0   
                Potencjaly[cx].append(val)
                val=sh.cell_value(rx, 2*cx+43)                
                try: 
                    int(val)
                except: 
                    val=0
                Potencjaly[cx+7].append(val) 
        for rx in xrange(rlo, rhi):
            Potencjaly[6].append(0)
            Potencjaly[-1].append(0)   
        return Potencjaly
    
    
    
    Potencjaly=Miasto()
    Potencjaly=Aglo(Potencjaly)    
    #print [sum(kolumna) for kolumna in Potencjaly]   
    return Potencjaly

def Visum_input(Potencjaly,Uh_miasto,Uh_strefa):
    Visum.Filters.InitAll()
     
    def wskaznik(j,i,szczyt):
        if j<266:            
            wskaznik=Uh_miasto[szczyt][i]
        else:            
            wskaznik=Uh_strefa[szczyt][i]        
        return wskaznik    
    
    #Uh_miasto=[[0.28,  0.01,  0.06,  0.01,  0.09,  0.01,  0.06],
    #           [0.04,  0.01,  0.02,  0.05,  0.08,  0.09,  0.1],
    #           [0.0074,    0.2181,    0.0232,    0.1570,    0.0576,    0.0809,    0.1186]]
   
   
    #Uh_strefa=[[0.31,    0.05,    0.07,    0,    0,    0,0],
    #           [0.04,    0,    0.01,    0.02,    0.04,    0.02,0],
    #           [0.02,    0.11,    0,    0.06,    0.03,    0.05,0]]

    
    Motywacje=["D-P",    "P-D" ,   "D-N"  ,  "N-D" ,   "D-I",   "I-D" ,   "NZD", 
               "D-P",    "P-D" ,   "D-N"  ,  "N-D" ,   "D-I",   "I-D" ,   "NZD"]
    
    i=0 
    Szczyty=["_rano","_miedzy","_popo"] 
    
    nowe=[]
    for kolumna in Potencjaly:
        
        if i<7:
            ii=i
            ProdAtr="prod_"
        else:
            ii=i-7
            ProdAtr="atr_"  
        for szczyt in Szczyty:            
            nowa_kolumna=[kolumna[j]*wskaznik(j,ii,Szczyty.index(szczyt)) for j in range(302)]
            nowe.append(nowa_kolumna)            
            SetMulti(Visum.Net.Zones, ProdAtr+Motywacje[i]+szczyt, nowa_kolumna, activeOnly = True)            
        i+=1
    



def Filter_Zones(miasto): 
    """dwa filtry, 
    jeden ustawiany spod palca - 
    podroze zewnetrzne, drugi tylko dla podrozy 
    Aglo - KRK - z pliku (bo sa nawiasy - nie wiem jak zrobic z COM) """
        
        
    if miasto==1:
        oper=1
        val=499
    elif miasto==0:
        oper=13    
        val=Visum.Filters.Range(399,499)  
    else:
        oper=3
        val=499  
    Visum.Filters.InitAll()
    ZoneFilter=Visum.Filters.ZoneFilter()
    ZoneFilter.AddCondition("OP_NONE", False, "No", oper, val)
    
def Deactivate_Procedures():
    Operations=Visum.Procedures.Operations.GetAll    
    for Operation in Operations:
        Operation.SetAttValue("Active",0) 

def Generation(obszar):
    """ dla kazdej motywacji zapisuje parametry produkcji i atrakcji i zapisuje je
        za pomoca time series mozna dodawac kolejne szczyty
    """
        
    def gen(TimeSerie,obszar):
        Visum.Filters.InitAll()    
        Strata=[["D-P",aglo,miasto],    ["P-D",miasto,aglo] ,   ["D-N",aglo,miasto]  ,  ["N-D",miasto,aglo] ,   ["D-I",aglo,miasto],   ["I-D",miasto,aglo] ,   ["NZD",aglo,miasto]] 
        i=0
        for strata in Strata:
            
            Deactivate_Procedures()
            Oper=Visum.Procedures.Operations.AddOperation(1)
            Oper.SetAttValue("OperationType",45)
            Oper=Visum.Procedures.Operations.ItemByKey(1)
             
            strata_name=strata[0]+TimeSerie
            prod_name="prod_"+strata[0]+TimeSerie
            atr_name="atr_"+strata[0]+TimeSerie
            
            if obszar=="miasto":
                [Prods,Atrs]=zeruj(GetMulti(Visum.Net.Zones,prod_name),GetMulti(Visum.Net.Zones,atr_name),miasto,miasto)
            else:                    
                [Prods,Atrs]=zeruj(GetMulti(Visum.Net.Zones,prod_name),GetMulti(Visum.Net.Zones,atr_name),strata[1],strata[2])            
            SetMulti(Visum.Net.Zones,"dummy_prod",Prods)
            SetMulti(Visum.Net.Zones,"dummy_atr",Atrs)
            Oper.TripGenerationParameters.SetAttValue("DStratSet",strata_name)
            Oper.TripGenerationParameters.AddLinCombAtt("dummy_prod")
            Oper.TripGenerationParameters.AddLinCombAtt("dummy_atr")
            Params=Oper.TripGenerationParameters.TripGenerationDStratParameters(strata_name)
            Params.SetProductionRate(1, 1)
            Params.SetAttractionRate(2, 1)
            i+=1
            Visum.Procedures.Execute()
    
    
    def zeruj(Prods,Atrs,prods_rang,atrs_rang):
            for i in prods_rang:
                Prods[i]=0        
            for i in atrs_rang:
                Atrs[i]=0
            return [Prods,Atrs]
        
    
    aglo=range(265)
    miasto=range(266,321)
    
    
    TimeSeries=["_rano","_miedzy","_popo"]    
    for TimeSerie in TimeSeries:
        gen(TimeSerie,obszar)
 
def Distribution(obszar,Grav,Dir):
    skimno=Skim_DST()
    Deactivate_Procedures()
    
    def Create_XML(Strata_name,Gravity,Direction,Balance,Initial_Balance,Dir):
        
        path=Dir+"/trip_distr_para.xml"
        f=open(path,"w")
        XML_file="""<?xml  version = "1.0"  encoding = "UTF-8"?>
                <PROCEDURES  VERSION = "5">
                  <OPERATIONS>
                    <OPERATION
                      NO = "1"
                      OPERATIONTYPE = "TripDistribution"
                      ACTIVE = "1"
                      COMMENT = "">
                      <TRIPDISTRIBUTIONPARA
                        RESETMATRICES = "1"
                        ACTIVEODPAIRSONLY = "1"
                        EXCLUDEODPAIRSOFPASSIVEZONES = "0"
                        USEESTIMATEDPARAMETERS = "0"
                        DSTRATSET =  """ + Strata_name + """  >
                        
                        <TRIPDISTRIBUTIONLINCOMBPARA
                          NO = "1"
                          INPUTTYPE = "MATRIX"
                          ATTID = "b"
                          MATRIXNO = " """+str(skimno)+""" "
                        />        
                        <TRIPDISTRIBUTIONDSTRATPARA          DEMANDSTRATUMCODE = """ + Strata_name + """         TOTALTRANSFORMATION = "TRANSFORMATIONTYPE_NONE">
                          <GRAVITATIONPARAMETERS
                            FUNCTIONTYPE = "UTILITYFUNCTIONTYPE_MUULI"
                            PARA_A = " """+Gravity[1]+""" "
                            PARA_B = " """+Gravity[2]+""" "
                            PARA_C = " """+Gravity[3]+""" "
                            DISTRIBUTIONDIRECTION = "DISTRIBUTIONDIRECTION_"""+Direction+""""
                            DOUBLYCONSTRAINED = " """+str(Balance)+""" " 
                            INITIALMATRIXBALANCING =  """+Initial_Balance+""" 
                            NUMITERATIONS = "10"
                            QUALITYFACTOR = "3,000000000"
                          />          
                          <TRIPDISTRIBUTIONLINCOMBDSTRATPARA
                            NO = "1"
                            TRANSFORMATION = "TRANSFORMATIONTYPE_NONE"
                            COEFFICIENT = "1,000000"
                          />          
                        </TRIPDISTRIBUTIONDSTRATPARA>
                      </TRIPDISTRIBUTIONPARA>
                    </OPERATION>
                  </OPERATIONS>
                  </PROCEDURES>
                  """
        
        f.writelines(XML_file)
        f.close()        
        
    
    
    #Strata=XMLName, Grav_no, DistributionDirection, Mtx_No
    
    Strata=[[""" "D-P_rano" """,[1,4],"PRODUCTION",101,110,""" "MATRIXBALANCING_PRODUCTIONTOTALS" """""],
            [""" "P-D_rano" """,[1,4],"ATTRACTION",102,110],
            [""" "D-N_rano" """,[2,5],"PRODUCTION",103,110],
            [""" "N-D_rano" """,[2,5],"ATTRACTION",104,110],
            [""" "D-I_rano" """,[3,6],"ATTRACTION",105,110],
            [""" "I-D_rano" """,[3,6],"PRODUCTION",106,110],
            [""" "NZD_rano" """,[3,7],"ATTRACTION",107,110],
            [""" "D-P_miedzy" """,[1,4],"PRODUCTION",201,210,""" "MATRIXBALANCING_PRODUCTIONTOTALS" """""],
            [""" "P-D_miedzy" """,[1,4],"ATTRACTION",202,210],
            [""" "D-N_miedzy" """,[2,5],"PRODUCTION",203,210],
            [""" "N-D_miedzy" """,[2,5],"ATTRACTION",204,210],
            [""" "D-I_miedzy" """,[3,6],"ATTRACTION",205,210],
            [""" "I-D_miedzy" """,[3,6],"PRODUCTION",206,210],
            [""" "NZD_miedzy" """,[3,7],"ATTRACTION",207,210],
            [""" "D-P_popo" """,[1,4],"PRODUCTION",301,310,""" "MATRIXBALANCING_PRODUCTIONTOTALS" """""],
            [""" "P-D_popo" """,[1,4],"ATTRACTION",302,310],
            [""" "D-N_popo" """,[2,5],"PRODUCTION",303,310],
            [""" "N-D_popo" """,[2,5],"ATTRACTION",304,310],
            [""" "D-I_popo" """,[3,6],"ATTRACTION",305,310],
            [""" "I-D_popo" """,[3,6],"PRODUCTION",306,310],
            [""" "NZD_popo" """,[3,7],"ATTRACTION",307,310]]
    for strata in Strata:
        M=Visum.Net.Matrices.ItemByKey(strata[3])
        M.Init()
              

    path=Dir+"/trip_distr_para.xml" 
    if obszar=="miasto":
            obszar=0            
    else: 
            obszar=1
             
    
              
    
    for strata in Strata:
        flag=0
        try:
            Visum.Net.AddMatrix(strata[4])
            Visum.Net.AddMatrix(strata[4]+1)     
        except:
            pass
        if obszar>0:    
            try: 
                strata[-1]+3        
                Create_XML(strata[0],Grav[strata[1][obszar]],strata[2],1,""" "MATRIXBALANCING_MINOFBOTHTOTALS" """"",Dir) 
            except:
                Create_XML(strata[0],Grav[strata[1][obszar]],strata[2],0,strata[-1],Dir)
        else: Create_XML(strata[0],Grav[strata[1][obszar]],strata[2],1,""" "MATRIXBALANCING_PRODUCTIONTOTALS" """"",Dir)       
        Visum.Procedures.OpenXml(path,True) 
        Visum.Procedures.Execute() 
        
        Mtx=Visum.Net.Matrices.ItemByKey(strata[3]).GetValues()
        if obszar==0:            
            mtxno=strata[4]
        else:            
            mtxno=strata[4]+1
        
        Visum.Net.Matrices.ItemByKey(mtxno).SetValues(Mtx,True)

def Filtr_po_TFlow(szczyt,par):
    for szczyt in ["rano","miedzy","popo"]:
    
        if szczyt=="rano":
            Mtxno=150
        elif szczyt=="miedzy":
            Mtxno=250
        else:
            Mtxno=350
            
        szczyt=Mtxno
        
        M1=Visum.Net.Matrices.ItemByKey(szczyt)
        M1.Save("C:\m1.fma",2)   
        
        M2=Visum.Net.Matrices.ItemByKey(szczyt+2)
        M2.Save("C:\m2.fma",2)
        
        Visum.MatrixEditor.MLoad("C:\m2.fma")
        Visum.MatrixEditor.MDivide("C:\m1.fma")
        Visum.MatrixEditor.MSave("C:\m3.fma","$V;D2")
        
        Visum.Net.Matrices.ItemByKey(szczyt+4).Open("C:\m3.fma")
        
        Visum.MatrixEditor.MFilterAndSet(1/float(par), 0, 999999999, 0, "", 1/float(par))
        Visum.MatrixEditor.MFilterAndSet(0, 0, par, 0, "", par)    
        
        Visum.MatrixEditor.MSave("C:\m3.fma","$V;D2")
        
        Visum.Net.Matrices.ItemByKey(szczyt+5).Open("C:\m3.fma")
        
        Visum.MatrixEditor.MMultiply("C:\m1.fma")
        
        Visum.MatrixEditor.MSave("C:\m3.fma","$V;D2")
        
        Visum.Net.Matrices.ItemByKey(szczyt+3).Open("C:\m3.fma")
   



            
def Skim_DST():
    Deactivate_Procedures()
    CalcSkimOper=Visum.Procedures.Operations.AddOperation(1)
    CalcSkimOper.SetAttValue("OperationType", 103.0)
    CalcSkimOper.SetAttValue("PrTAssignment","PrtSkimMatrix")
    CalcSkimOper.SetAttValue("DSegSet", "Car")
    CalcSkimOper=Visum.Procedures.Operations.ItemByKey(1)        
    Visum.Procedures.Functions.PrTSkimMatrixSettings.SingleSkimMatrixSettings("TRIPDIST").SetAttValue("DiagonalValue",99999)
    Visum.Procedures.Operations.ItemByKey(1).PrTSkimMatrixParameters.SingleSkimMatrixParameters("TRIPDIST").SetAttValue("Calculate",1)
    Visum.Procedures.Execute() 
    return skimLookup(Visum, "DIS","Car")       
        


def Calc_Tcur_Skim():
    path="""D:/DropBox/My Dropbox/i2/Prace/___Nie Visumowe/2011, PK, Krakow/Skim_PrT.xml"""
    Deactivate_Procedures()
    
        
    Visum.Procedures.OpenXml(path,True)
    Visum.Procedures.Execute()     
         

    
  
def mnozenie(a,b,c):
    
    M1=Visum.Net.Matrices.ItemByKey(a)
    M1.Save("D:\m1.fma",2)
    M2=Visum.Net.Matrices.ItemByKey(b)
    M2.Save("D:\m2.fma",2)
    Visum.MatrixEditor.MLoad("D:\m1.fma")
    Visum.MatrixEditor.MMultiply("D:\m2.fma")
    Visum.MatrixEditor.MSave("D:\m3.fma", "$V;D2")    
    Visum.Net.Matrices.ItemByKey(c).Open("D:\m3.fma",False)
    



#Generate_UDAs_Zones()    


#
#obszar="miasto"
#Generation(obszar)
#Distribution(obszar)
#
##Aggregate_Pierwotny("D:/Aggregate_Pierwotny_1.xml")
#obszar="aglo"
#Generation(obszar)
#Distribution(obszar)
##Aggregate_Pierwotny("D:/Aggregate_Pierwotny_2.xml")
##Calc_Put_Prt()
##Calc_Tcur_Skim()
#Visum.SaveVersion("D:/Czyszczenie_0.ver")



#mnozenie(180,181,190)
#mnozenie(280,281,290)
#mnozenie(380,381,390)





            
                
            
            
               
    
    
        






if __name__ == "__main__":
    #app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    dialog_1 = MyDialog(None, -1, "")
    app.SetTopWindow(dialog_1)
    dialog_1.Show()
    #app.MainLoop()
