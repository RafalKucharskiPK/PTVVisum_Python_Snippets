#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.5 (standalone edition) on Tue Jul 17 14:46:44 2012

import wx

# begin wxGlade: extracode
# end wxGlade



class Aggregator(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: Aggregator.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.label_1 = wx.StaticText(self, -1, "Spatial data aggregator by", style=wx.ALIGN_RIGHT)
        self.logo_copy = wx.StaticBitmap(self, -1, wx.Bitmap("D:\\DropBox\\My Dropbox\\i2\\Prace\\2011, MapFormers\\MapFormers\\i2_logo.png", wx.BITMAP_TYPE_ANY))
        self.label_2 = wx.StaticText(self, -1, "Active:")
        self.label_2_copy = wx.StaticText(self, -1, "Object:")
        self.label_2_copy_1 = wx.StaticText(self, -1, "Attribute:")
        self.label_2_copy_2 = wx.StaticText(self, -1, "Weight:")
        self.c1 = wx.CheckBox(self, -1, "")
        self.co1 = wx.ComboBox(self, -1, choices=["Zone", "Main Zone", "Node", "Stop Point", "Stop Area", "Stop", "POI", "Territory"], style=wx.CB_DROPDOWN)
        self.h1 = wx.Button(self, -1, "Attr")
        self.w1 = wx.TextCtrl(self,-1,"1")
        self.c2 = wx.CheckBox(self, -1, "")
        self.co2 = wx.ComboBox(self, -1, choices=["Zone", "Main Zone", "Node", "Stop Point", "Stop Area", "Stop", "POI", "Territory"], style=wx.CB_DROPDOWN)
        self.h2 = wx.Button(self, -1, "Attr")
        self.w2 = wx.TextCtrl(self,-1,"1")
        self.c3 = wx.CheckBox(self, -1, "")
        self.co3 = wx.ComboBox(self, -1, choices=["Zone", "Main Zone", "Node", "Stop Point", "Stop Area", "Stop", "POI", "Territory"], style=wx.CB_DROPDOWN)
        self.h3 = wx.Button(self, -1, "Attr")
        self.w3 = wx.TextCtrl(self,-1,"1")
        self.c4 = wx.CheckBox(self, -1, "")
        self.co4 = wx.ComboBox(self, -1, choices=["Zone", "Main Zone", "Node", "Stop Point", "Stop Area", "Stop", "POI", "Territory"], style=wx.CB_DROPDOWN)
        self.h4 = wx.Button(self, -1, "Attr")
        self.w4 = wx.TextCtrl(self,-1,"1")
        self.c5 = wx.CheckBox(self, -1, "")
        self.co5 = wx.ComboBox(self, -1, choices=["Zone", "Main Zone", "Node", "Stop Point", "Stop Area", "Stop", "POI", "Territory"], style=wx.CB_DROPDOWN)
        self.h5 = wx.Button(self, -1, "Attr")
        self.w5 = wx.TextCtrl(self,-1,"1")
        self.c6 = wx.CheckBox(self, -1, "")
        self.co6 = wx.ComboBox(self, -1, choices=["Zone", "Main Zone", "Node", "Stop Point", "Stop Area", "Stop", "POI", "Territory"], style=wx.CB_DROPDOWN)
        self.h6 = wx.Button(self, -1, "Attr")
        self.w6 = wx.TextCtrl(self,-1,"1")
        self.c7 = wx.CheckBox(self, -1, "")
        self.co7 = wx.ComboBox(self, -1, choices=["Zone", "Main Zone", "Node", "Stop Point", "Stop Area", "Stop", "POI", "Territory"], style=wx.CB_DROPDOWN)
        self.h7 = wx.Button(self, -1, "Attr")
        self.w7 = wx.TextCtrl(self,-1,"1")
        self.sizer_8_staticbox = wx.StaticBox(self, -1, "Select data to aggregate")
        self.label_3_copy_1 = wx.StaticText(self, -1, "a) target element:")
        self.tc1 = wx.ComboBox(self, -1, choices=["Zone", "Main Zone", "Node", "Stop Point", "Stop Area", "Stop", "POI", "Territory"], style=wx.CB_DROPDOWN)
        self.label_3_copy_copy_copy = wx.StaticText(self, -1, "b) separate sums for attributes?")
        self.checkbox_1 = wx.CheckBox(self, -1, "")
        self.label_3_copy_copy_copy_1 = wx.StaticText(self, -1, "c) or sum aggregated to one Attr?")
        self.ta1 = wx.Button(self, -1, "Attr")
        self.sizer_7_staticbox = wx.StaticBox(self, -1, "2. Specify output:")
        self.HelpBtn = wx.Button(self, -1, "Help")
        self.logo = wx.StaticBitmap(self, -1, wx.Bitmap("D:\\DropBox\\My Dropbox\\i2\\Prace\\2011, MapFormers\\MapFormers\\i2_logo.png", wx.BITMAP_TYPE_ANY))
        self.Aggregate_Btn = wx.Button(self, -1, "Aggregate")
        self.CancelBtn = wx.Button(self, -1, "Cancel")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.h1, self.h1)
        self.Bind(wx.EVT_BUTTON, self.a2, self.h2)
        self.Bind(wx.EVT_BUTTON, self.a3, self.h3)
        self.Bind(wx.EVT_BUTTON, self.a4, self.h4)
        self.Bind(wx.EVT_BUTTON, self.a5, self.h5)
        self.Bind(wx.EVT_BUTTON, self.a6, self.h6)
        self.Bind(wx.EVT_BUTTON, self.a7, self.h7)
        self.Bind(wx.EVT_BUTTON, self.Attr_Choose_Handler, self.ta1)
        self.Bind(wx.EVT_BUTTON, self.HelpClick, self.HelpBtn)
        self.Bind(wx.EVT_BUTTON, self.Aggregate_Handler, self.Aggregate_Btn)
        self.Bind(wx.EVT_BUTTON, self.Cancel_Click, self.CancelBtn)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: Aggregator.__set_properties
        self.SetTitle("frame_1")
        self.SetSize((750, 738))
        self.label_1.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.logo_copy.SetMinSize((80, 20))
        self.co1.SetMinSize((70, 21))
        self.co1.SetSelection(0)
        self.h1.SetMinSize((-1, -1))
        self.w1.SetMinSize((50, 24))
        self.co2.SetMinSize((70, 21))
        self.co2.SetSelection(0)
        self.h2.SetMinSize((-1, -1))
        self.w2.SetMinSize((50, 24))
        self.co3.SetMinSize((70, 21))
        self.co3.SetSelection(0)
        self.h3.SetMinSize((-1, -1))
        self.w3.SetMinSize((50, 24))
        self.co4.SetMinSize((70, 21))
        self.co4.SetSelection(0)
        self.h4.SetMinSize((-1, -1))
        self.w4.SetMinSize((50, 24))
        self.co5.SetMinSize((70, 21))
        self.co5.SetSelection(0)
        self.h5.SetMinSize((-1, -1))
        self.w5.SetMinSize((50, 24))
        self.co6.SetMinSize((70, 21))
        self.co6.SetSelection(0)
        self.h6.SetMinSize((-1, -1))
        self.w6.SetMinSize((50, 24))
        self.co7.SetMinSize((70, 21))
        self.co7.SetSelection(0)
        self.h7.SetMinSize((-1, -1))
        self.w7.SetMinSize((50, 24))
        self.tc1.SetMinSize((70, 21))
        self.tc1.SetSelection(0)
        self.checkbox_1.SetMinSize((-1, -1))
        self.checkbox_1.SetValue(1)
        self.ta1.SetMinSize((-1, -1))
        self.HelpBtn.SetMinSize((87, -1))
        self.logo.SetMinSize((80, 20))
        self.Aggregate_Btn.SetMinSize((-1, -1))
        self.CancelBtn.SetMinSize((87, -1))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: Aggregator.__do_layout
        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_7_staticbox.Lower()
        sizer_7 = wx.StaticBoxSizer(self.sizer_7_staticbox, wx.HORIZONTAL)
        grid_sizer_2 = wx.GridSizer(3, 2, 0, 0)
        self.sizer_8_staticbox.Lower()
        sizer_8 = wx.StaticBoxSizer(self.sizer_8_staticbox, wx.HORIZONTAL)
        grid_sizer_1 = wx.GridSizer(8, 4, 0, 0)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(self.label_1, 2, wx.ALL | wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_4.Add(self.logo_copy, 3, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_10.Add(sizer_4, 30, wx.EXPAND, 0)
        grid_sizer_1.Add(self.label_2, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.label_2_copy, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.label_2_copy_1, 2, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.label_2_copy_2, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.c1, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.co1, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.h1, 2, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.w1, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_1.Add(self.c2, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.co2, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.h2, 2, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.w2, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_1.Add(self.c3, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.co3, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.h3, 2, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.w3, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_1.Add(self.c4, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.co4, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.h4, 2, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.w4, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_1.Add(self.c5, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.co5, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.h5, 2, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.w5, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_1.Add(self.c6, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.co6, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.h6, 2, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.w6, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_1.Add(self.c7, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.co7, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.h7, 2, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(self.w7, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_8.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        sizer_10.Add(sizer_8, 120, wx.EXPAND, 0)
        grid_sizer_2.Add(self.label_3_copy_1, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_2.Add(self.tc1, 0, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_2.Add(self.label_3_copy_copy_copy, 1, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_2.Add(self.checkbox_1, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_2.Add(self.label_3_copy_copy_copy_1, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_2.Add(self.ta1, 0, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_7.Add(grid_sizer_2, 50, wx.EXPAND, 0)
        sizer_10.Add(sizer_7, 50, wx.EXPAND, 0)
        sizer_5.Add(self.HelpBtn, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_5.Add(self.logo, 3, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_5.Add(self.Aggregate_Btn, 0, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_5.Add(self.CancelBtn, 1, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 10)
        sizer_10.Add(sizer_5, 20, wx.ALL | wx.EXPAND, 10)
        self.SetSizer(sizer_10)
        self.Layout()
        # end wxGlade

    def h1(self, event):  # wxGlade: Aggregator.<event_handler>
        print "Event handler `h1' not implemented!"
        event.Skip()

    def a2(self, event):  # wxGlade: Aggregator.<event_handler>
        print "Event handler `a2' not implemented!"
        event.Skip()

    def a3(self, event):  # wxGlade: Aggregator.<event_handler>
        print "Event handler `a3' not implemented!"
        event.Skip()

    def a4(self, event):  # wxGlade: Aggregator.<event_handler>
        print "Event handler `a4' not implemented!"
        event.Skip()

    def a5(self, event):  # wxGlade: Aggregator.<event_handler>
        print "Event handler `a5' not implemented!"
        event.Skip()

    def a6(self, event):  # wxGlade: Aggregator.<event_handler>
        print "Event handler `a6' not implemented!"
        event.Skip()

    def a7(self, event):  # wxGlade: Aggregator.<event_handler>
        print "Event handler `a7' not implemented!"
        event.Skip()

    def Attr_Choose_Handler(self, event):  # wxGlade: Aggregator.<event_handler>
        print "Event handler `Attr_Choose_Handler' not implemented!"
        event.Skip()

    def HelpClick(self, event):  # wxGlade: Aggregator.<event_handler>
        print "Event handler `HelpClick' not implemented!"
        event.Skip()

    def Aggregate_Handler(self, event):  # wxGlade: Aggregator.<event_handler>
        print "Event handler `Aggregate_Handler' not implemented!"
        event.Skip()

    def Cancel_Click(self, event):  # wxGlade: Aggregator.<event_handler>
        print "Event handler `Cancel_Click' not implemented!"
        event.Skip()

# end of class Aggregator
class MyDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyDialog.__set_properties
        self.SetTitle("Spatial data aggregator")
        self.SetSize((688, 664))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyDialog.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_2, 10, wx.EXPAND, 0)
        sizer_1.Add(sizer_3, 10, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def h1(self, event):  # wxGlade: MyDialog.<event_handler>
        print "Event handler `h1' not implemented!"
        event.Skip()

    def a2(self, event):  # wxGlade: MyDialog.<event_handler>
        print "Event handler `a2' not implemented!"
        event.Skip()

    def a3(self, event):  # wxGlade: MyDialog.<event_handler>
        print "Event handler `a3' not implemented!"
        event.Skip()

    def a4(self, event):  # wxGlade: MyDialog.<event_handler>
        print "Event handler `a4' not implemented!"
        event.Skip()

    def a5(self, event):  # wxGlade: MyDialog.<event_handler>
        print "Event handler `a5' not implemented!"
        event.Skip()

    def a6(self, event):  # wxGlade: MyDialog.<event_handler>
        print "Event handler `a6' not implemented!"
        event.Skip()

    def a7(self, event):  # wxGlade: MyDialog.<event_handler>
        print "Event handler `a7' not implemented!"
        event.Skip()

    def Attr_Choose_Handler(self, event):  # wxGlade: MyDialog.<event_handler>
        print "Event handler `Attr_Choose_Handler' not implemented!"
        event.Skip()

    def HelpClick(self, event):  # wxGlade: MyDialog.<event_handler>
        print "Event handler `HelpClick' not implemented!"
        event.Skip()

    def Aggregate_Handler(self, event):  # wxGlade: MyDialog.<event_handler>
        print "Event handler `Aggregate_Handler' not implemented!"
        event.Skip()

    def Cancel_Click(self, event):  # wxGlade: MyDialog.<event_handler>
        print "Event handler `Cancel_Click' not implemented!"
        event.Skip()

# end of class MyDialog
if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    dialog_1 = MyDialog(None, -1, "")
    app.SetTopWindow(dialog_1)
    dialog_1.Show()
    app.MainLoop()
